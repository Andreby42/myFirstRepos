package com.yinlian.api.app.controller;

import java.text.MessageFormat;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.yinlian.Enums.ActivityUsePlatformEnum;
import com.yinlian.Enums.MemberCouponTypeEnum;
import com.yinlian.Extended.LogType;
import com.yinlian.api.app.dto.SearchCouponDto;
import com.yinlian.wssc.platform.vo.BaseResult;
import com.yinlian.wssc.platform.vo.ReusltItem;
import com.yinlian.wssc.web.dto.SessionUser;
import com.yinlian.wssc.web.interceptor.PageBean;
import com.yinlian.wssc.web.service.CouponService;
import com.yinlian.wssc.web.util.CriteriaCoupon;
import com.yinlian.wssc.web.util.DebugConfig;
import com.yinlian.wssc.web.util.SessionState;
import com.yinlian.wssc.web.util.StringUtilsEX;
import com.yl.soft.log.LogHandle;

import net.sf.json.JSONArray;

@RestController
@RequestMapping("/api/app/coupon")
public class CouponInfoController {

	@Autowired
	private CouponService couponService;	
	/**
	 * 领取优惠券
	 * 
	 * @param token
	 * @param couponid
	 * @return
	 */
	@RequestMapping(value = "/takeCoupon", produces = "text/html;charset=UTF-8")
	public String takeCoupon(String token, String ch, String couponid,
			HttpServletResponse response) {
		BaseResult item = new BaseResult();
		response.addHeader("Access-Control-Allow-Origin", "*");
		response.setHeader("Access-Control-Allow-Methods",
				"POST, GET, OPTIONS, DELETE");
		response.setHeader("Access-Control-Max-Age", "3600");
		response.setHeader("Access-Control-Allow-Headers", "x-requested-with");
		try {
			if (StringUtilsEX.IsNullOrWhiteSpace(token)) {
				item.setCode(-101);
				item.setDesc("token不能为空！");
				return item.toJson();
			}
			if (StringUtilsEX.ToInt(couponid) <= 0) {
				item.setCode(-102);
				item.setDesc("优惠券ID(couponId)参数错误！");
				return item.toJson();
			}
			SessionUser user = SessionState.GetCurrentUser(token);
			if (user.getCode() != 0) {
				item.setCode(-401);
				item.setDesc("请先登录！");
				return item.toJson();
			}
			if (!StringUtilsEX.isChannelTypeExist(ch)) {
				item.setCode(-103);
				item.setDesc("登录通道(ch)不正确！");
				return item.toJson();
			}
			// int userId = 1;
			// 领取优惠券
			if (couponService.addUserCoupon(StringUtilsEX.ToInt(couponid),
					user.getUserId(), user.getLoginName(), item) > 0) {
				item.setCode(0);
				item.setDesc("领取优惠券成功");
				LogHandle.info(LogType.Coupon, MessageFormat.format(
						"领取优惠券成功! 优惠券id：{0},用户ID:{1}", couponid,
						user.getUserId()), "CouponInfo/takeCoupon");
			} else {
				if (item.getCode() == 0)
					item.setCode(-200);
				LogHandle.info(LogType.Coupon, MessageFormat.format(
						"领取优惠券失败! 优惠券id：{0},用户ID:{1}", couponid,
						user.getUserId()), "CouponInfo/takeCoupon");
			}
		} catch (Exception e) {
			if (DebugConfig.BLUETOOTH_DEBUG) {
				item.setDesc(e.toString());
			} else {
				item.setDesc("系统错误！");
			}
			item.setCode(-900);
			LogHandle.error(LogType.Coupon, "领取优惠券异常，信息：" + e,
					"CouponInfo/takeCoupon");
		}
		return item.toJson();
	}

	/**
	 * 查询当前用户的优惠券
	 * 
	 * @param token
	 * @return
	 */
	@RequestMapping(value = "/showCoupon", produces = "text/html;charset=UTF-8")
	public String showCoupon(String token, String ch, String type, String page,
			String size, HttpServletResponse response) {
		ReusltItem item = new ReusltItem();
		response.addHeader("Access-Control-Allow-Origin", "*");
		response.setHeader("Access-Control-Allow-Methods",
				"POST, GET, OPTIONS, DELETE");
		response.setHeader("Access-Control-Max-Age", "3600");
		response.setHeader("Access-Control-Allow-Headers", "x-requested-with");
		try {
			if (StringUtilsEX.IsNullOrWhiteSpace(token)) {
				item.setCode(-101);
				item.setDesc("token不能为空");
				return item.toJson();
			}
			SessionUser user = SessionState.GetCurrentUser(token);
			if (user.getCode() != 0) {
				item.setCode(-401);
				item.setDesc("用户未登录");
				return item.toJson();
			}
			if (!StringUtilsEX.isChannelTypeExist(ch)) {
				item.setCode(-102);
				item.setDesc("登录通道(ch)不正确！");
				return item.toJson();
			}
			if (StringUtilsEX.ToInt(page) <= 0
					|| StringUtilsEX.ToInt(size) <= 0) {
				item.setCode(-103);
				item.setDesc("分页参数错误，pageindex:" + page + ",pagesize:" + size);
				return item.toJson();
			}

			if (StringUtilsEX.ToInt(type) < MemberCouponTypeEnum.全部.getValue()
					|| StringUtilsEX.ToInt(type) > MemberCouponTypeEnum.回收站
							.getValue()) {
				item.setCode(-104);
				item.setDesc("优惠券类型错误");
				return item.toJson();
			}
			CriteriaCoupon criteria = new CriteriaCoupon();
			criteria.setStatus(StringUtilsEX.ToInt(type));
			criteria.setSort("desc");
			criteria.setOrderByClause("ProvideTime");
			criteria.setUserid(user.getUserId());
			PageBean pBean = couponService.getByUserID(criteria,
					StringUtilsEX.ToInt(page), StringUtilsEX.ToInt(size));
			item.setData(pBean.getBeanList());
			item.setMaxRow(pBean.getTr());
			item.setPageIndex(pBean.getPc());
			item.setCode(0);

		} catch (Exception e) {
			if (DebugConfig.BLUETOOTH_DEBUG) {
				item.setDesc(e.toString());
			} else {
				item.setDesc("系统错误！");
			}
			item.setCode(-900);
			LogHandle.error(LogType.Coupon, "获取当前用户的优惠券异常，信息：" ,e,
					"CouponInfo/showCoupon");
		}
		return item.toJson();
	}

	/**
	 * 获取可领取的优惠券列表
	 * 
	 * @param token
	 * @return
	 */
	@RequestMapping(value = "/getCouponList", produces = "text/html;charset=UTF-8")
	public String getCouponList(String token, String ch, String page,
			String size, HttpServletResponse response) {
		ReusltItem item = new ReusltItem();
		response.addHeader("Access-Control-Allow-Origin", "*");
		response.setHeader("Access-Control-Allow-Methods",
				"POST, GET, OPTIONS, DELETE");
		response.setHeader("Access-Control-Max-Age", "3600");
		response.setHeader("Access-Control-Allow-Headers", "x-requested-with");
		try {
			if (StringUtilsEX.IsNullOrWhiteSpace(token)) {
				item.setCode(-101);
				item.setDesc("token不能为空");
				return item.toJson();
			}
			SessionUser user = SessionState.GetCurrentUser(token);
			if (user.getCode() != 0) {
				item.setCode(-401);
				item.setDesc("用户未登录");
				return item.toJson();
			}
			if (!StringUtilsEX.isChannelTypeExist(ch)) {
				item.setCode(-102);
				item.setDesc("登录通道(ch)不正确！");
				return item.toJson();
			}
			if (StringUtilsEX.ToInt(page) <= 0
					|| StringUtilsEX.ToInt(size) <= 0) {
				item.setCode(-103);
				item.setDesc("分页参数错误，pageindex:" + page + ",pagesize:" + size);
				return item.toJson();
			}
			CriteriaCoupon criteria = new CriteriaCoupon();
			criteria.setSort("desc");
			criteria.setOrderByClause("CreateTime");
			criteria.setUseplatform(ActivityUsePlatformEnum.app.getValue());
			PageBean pBean = couponService.getUserCouponList(criteria,
					StringUtilsEX.ToInt(page), StringUtilsEX.ToInt(size));
			item.setData(pBean.getBeanList());
			item.setMaxRow(pBean.getTr());
			item.setPageIndex(pBean.getPc());
			item.setCode(0);
		} catch (Exception e) {
			if (DebugConfig.BLUETOOTH_DEBUG) {
				item.setDesc(e.toString());
			} else {
				item.setDesc("系统错误！");
			}
			item.setCode(-900);
			LogHandle.error(LogType.Coupon, "获取优惠券列表异常，信息：" , e,
					"/CouponInfo/getCouponList");
		}
		return item.toJson();
	}

	/**
	 * 获取用户优惠券
	 * 
	 * @param token
	 * @param str
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/getOrderCoupon", produces = "text/html;charset=UTF-8")
	public String getOrderCoupon(String token, String ch,
			HttpServletRequest request, HttpServletResponse response) {
		BaseResult item = new BaseResult();
		response.addHeader("Access-Control-Allow-Origin", "*");
		response.setHeader("Access-Control-Allow-Methods",
				"POST, GET, OPTIONS, DELETE");
		response.setHeader("Access-Control-Max-Age", "3600");
		response.setHeader("Access-Control-Allow-Headers", "x-requested-with");
		try {
			String personstr = request.getParameter("paramstr");
			// String personstr =str;
			if (StringUtilsEX.IsNullOrWhiteSpace(token)) {
				item.setCode(-101);
				item.setDesc("token不能为空");
				return item.toJson();
			}
			SessionUser user = SessionState.GetCurrentUser(token);
			if (user.getCode() != 0) {
				item.setCode(-401);
				item.setDesc("用户未登录");
				return item.toJson();
			}
			if (!StringUtilsEX.isChannelTypeExist(ch)) {
				item.setCode(-102);
				item.setDesc("登录通道(ch)不正确！");
				return item.toJson();
			}
			int userid = user.getUserId();
			// int userid=1;
			if (!StringUtilsEX.IsNullOrWhiteSpace(personstr)) {
				JSONArray json = JSONArray.fromObject(personstr);
				List<SearchCouponDto> searchCouponDtos = (List<SearchCouponDto>) JSONArray
						.toCollection(json, SearchCouponDto.class);
				item.setData(couponService.getOrderCoupon(searchCouponDtos,
						userid, ActivityUsePlatformEnum.app.getValue()));
			} else {
				return item.toJson();
			}

		} catch (Exception e) {
			item.setCode(-900);
			if (DebugConfig.BLUETOOTH_DEBUG) {
				item.setDesc("获取用户优惠券异常:" + e.toString());
			} else {
				item.setDesc("获取用户优惠券异常！");
			}
			LogHandle.error(LogType.Coupon, "获取用户优惠券异常，信息：" + e,
					"CouponInfo/getCoupons");
		}
		return item.toJson();
	}
	
}
